$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

@mixin bdesktop {
  @media (min-width: #{$big-desktop-width}) {
    @content;
  }
}

// Animations
@keyframes bounced {

  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }

  40% {
    transform: translateY(-10px);
  }

  60% {
    transform: translateY(-5px);
  }
}

@mixin hoverImage($time: 5.5s) {
  .image-bg {
    transition: transform $time ease;
  }

  &:hover {
    .image-bg {
      transform: scale(1.5);
    }
  }
}

// MQS
@mixin mq ($query) {
  $media-xxs: "(min-width : 320px)";
  $media-xs: "(min-width : 480px)";
  $media-mf: "(max-width: 768px)";
  $media-sm: "(min-width: 768px)";
  $media-tb: "(min-width: 768px) and (max-width: 1024px)";
  $media-md: "(min-width: 1024px)";
  $media-lg: "(min-width: 1200px)";
  $media-hd: "(min-width: 1560px)";
  $media-tbp: "(min-width : 768px) and (max-width : 800px) and (orientation : portrait)";
  $media-tbl: "(min-width : 968px) and (max-width : 1028px) and (orientation : landscape)";

  @if $query==xxs {
    @media #{$media-xxs} {
      @content;
    }
  }

  @if $query==xs {
    @media #{$media-xs} {
      @content;
    }
  }

  @else if $query==mf {
    @media #{$media-mf} {
      @content;
    }
  }

  @else if $query==sm {
    @media #{$media-sm} {
      @content;
    }
  }

  @else if $query==tb {
    @media #{$media-tb} {
      @content;
    }
  }

  @else if $query==tbp {
    @media #{$media-tbp} {
      @content;
    }
  }

  @else if $query==tbl {
    @media #{$media-tbl} {
      @content;
    }
  }

  @else if $query==md {
    @media #{$media-md} {
      @content;
    }
  }

  @else if $query==lg {
    @media #{$media-lg} {
      @content;
    }
  }

  @else if $query==hd {
    @media #{$media-hd} {
      @content;
    }
  }
}

@mixin bgcover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}

@mixin coverAbsolute ($z) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $z;
}

@mixin bgparallax {
  background-attachment: fixed;
  background-size: cover;
  background-position: center top;
}

@mixin iconSVG($path, $size:100%) {
  display: block;
  background-image: url($path);
  background-size: $size;
  background-repeat: no-repeat;
  background-position: center center;
  text-indent: -999999px;
  font-size: 0px;
  color: transparent;
  overflow: hidden;
}

@mixin FA($content, $color:$white, $size:rem(16px)) {
  content: $content;
  font-family: 'FontAwesome', Helvetica, Arial, sans-serif;
  color: $color;
  font-size: $size;
}

// Clearfix mixin
%clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Define default font size
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font($size) {
  font-size: $size;
  font-size: rem($size);
}

// Gradients
@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation=='vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  }

  @else if $orientation=='horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  }

  @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Arrows
@mixin arrow($direction, $color, $size) {
  display: block;
  height: 0;
  width: 0;

  @if $direction=='top' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }

  @else if $direction=='right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }

  @else if $direction=='bottom' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  }

  @else if $direction=='left' {
    border-top: $size solid transparent;
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
  }

  @else if $direction=='top-left' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  }

  @else if $direction=='top-right' {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  }

  @else if $direction=='bottom-left' {
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  }

  @else if $direction=='bottom-right' {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
}

// Pseudo
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;

  @if $position=='vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

  @else if $position=='horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }

  @else if $position=='both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Placeholders
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }

  &:-moz-placeholder {
    @content
  }

  &::-moz-placeholder {
    @content
  }

  &:-ms-input-placeholder {
    @content
  }
}

// Layout wrapper
@mixin wrapper {
  width: 100%;
  max-width: 1242px;
  margin: 0 auto;
}

@mixin cont {
  width: 100%;
  max-width: 1114px;
  margin: 0 auto;
}

@mixin flex($direction: column, $align-items: center, $justify-content: center) {
  display: flex;
  flex-direction: $direction;
  align-items: $align-items;
  justify-content: $justify-content;
}

@mixin flex-column($columns, $total-columns: $cols-s, $gutter: $gutter, $include-gutter: false, $with-min-width: false) {
  $extra-gutter: if($include-gutter, 2 * $gutter, 0px);
  $gutter-vw: get-vw($gutter, $screen-5k-min);
  $extra-gutter-vw: if($include-gutter, get-vw($extra-gutter, $screen-5k-min), 0px);

  flex-basis: calc(#{calculate-width($total-columns, $columns)} - (#{$gutter *
 ($total-columns - $columns) / $total-columns
    }

  ) + #{$extra-gutter});
flex-grow: 1;
max-width: calc(#{calculate-width($total-columns, $columns)} - (#{$gutter *
 ($total-columns - $columns) / $total-columns
  }

) + #{$extra-gutter});

@if $with-min-width {
  min-width: calc(#{calculate-width($total-columns, $columns)} - (#{$gutter *
 ($total-columns - $columns) / $total-columns
    }

  ) + #{$extra-gutter});
}
}

// Buttons
@mixin marineBtn($size) {
  font-size: $size;
  color: $white;
  display: inline-block;
  padding: 14px 22px;
  border-radius: 30px;
  background-color: $marine;
  font-family: $bd;
  min-width: 111px;
  border: none;
  transition: all 0.4s;
  text-transform: uppercase;
  cursor: pointer;

  &:hover,
  &:focus {
    background-color: $black;
  }
}

// Buttons
@mixin whiteBtn($size) {
  font-size: $size;
  color: $blue;
  display: inline-block;
  padding: 14px 22px;
  border-radius: 30px;
  background-color: $white;
  font-family: $bd;
  min-width: 111px;
  border: none;
  transition: all 0.4s;
  text-transform: uppercase;
  cursor: pointer;

  &:hover,
  &:focus {
    background-color: $black;
  }
}

// general btn
@mixin generalBtn($size, $color, $bg, $hover) {
  font-size: $size;
  letter-spacing: rem(2.3px);
  color: $color;
  display: inline-block;
  padding: 17px 22px;
  border: none;
  border-radius: 0;
  background-color: $bg;
  font-family: $lt;
  min-width: 111px;
  border: none;
  transition: all 0.4s;
  text-transform: uppercase;
  text-align: center;
  cursor: pointer;

  &:hover,
  &:focus {
    background-color: $hover;
  }
}

@mixin dividerTitle() {
  display: block;
  text-align: center;
  font-family: $eb;
  @include font(26px);
  letter-spacing: rem(3.2px);
  text-transform: uppercase;
  color: $brown;
}

@mixin afterline ($width: rem(185px), $height: rem(12px), $color:'yup') {
  content: "";
  display: block;
  width: $width;
  height: $height;
  position: absolute;
  bottom: 0;
  left: 0;
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100%;
  
  @if $color=='yup' {
    background-image: url('../images/misc/ornament.svg');
  }

  @else if $color=='white' {
    background-image: url('../images/misc/ornament-white.svg');
  }
}
